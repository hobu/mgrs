name: Build

on:
  pull_request:
    branches:
    - '*'
  push:
    branches:
    - '*'
  release:
    types:
      - published

jobs:
  conda:
    name: Conda ${{ matrix.python-version }} - ${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.8']

    steps:
    - uses: actions/checkout@v2
    - uses: goanpeca/setup-miniconda@v1.1.2
      with:
        channels: conda-forge
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}

    - name: Install
      shell: bash -l {0}
      run: |
        pip install -e .
    - name: List directories
      shell: bash -l {0}
      run: |
        dir 'c:\miniconda\envs\test\lib\site-packages'
        dir

      if: matrix.os == 'windows-latest'
    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        pip install flake8
        flake8 mgrs/
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        pip install pytest
        python -m pytest --doctest-modules tests

  ubuntu:
    name: Ubuntu ${{ matrix.os }}

    runs-on: ubuntu-16.04
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-16.04', 'ubuntu-18.04']

    steps:
    - uses: actions/checkout@v2
    - name: Setup
      shell: bash -l {0}
      run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install setuptools flake8 pytest tox

    - name: Build
      shell: bash -l {0}
      run: |
        pip3 install --no-deps . -t .
    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        export PATH=$PATH:/home/runner/.local/bin
        flake8 mgrs/
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        export PATH=$PATH:/home/runner/.local/bin
        tox


  linux-wheel:
    name: manylinux Wheel ${{ matrix.python-root }}

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.6','3.7','3.8']

    steps:
    - uses: actions/checkout@v2
    - name: Build
      shell: bash -l {0}
      run: |
          docker run -v $(pwd):/src quay.io/pypa/manylinux1_x86_64 /src/ci/build-wheel-linux.sh ${{ matrix.python-version }}

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Test
      shell: bash -l {0}
      run: |
          ./ci/test-wheel-linux.sh ${{ matrix.python-version }}

    - uses: actions/upload-artifact@v2
      with:
        name: manylinux-${{ matrix.python-version }}-whl
        path: wheelhouse/*.whl

  windows-wheel:
    name: Win64 ${{ matrix.python-version }} Wheel

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['windows-latest']
        python-version: ['3.6','3.7','3.8']
        sidx-version: ['1.9.3']
      fail-fast: true

    steps:
    - uses: actions/checkout@v2
    - uses: goanpeca/setup-miniconda@v1.1.2
      with:
        channels: conda-forge
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
    - name: Setup
      shell: bash -l {0}
      run: |
          conda install -c conda-forge compilers -y
          pip install cmake ninja

    - name: build
      shell: cmd /C CALL "{0}"
      run: |
        call .\ci\build-wheel.bat ${{ matrix.sidx-version }}

    - name: test
      shell: cmd /C CALL "{0}"
      run: |
        call .\ci\test-wheel.bat

    - uses: actions/upload-artifact@v2
      with:
        name: win64-${{matrix.python-version}}-whl
        path: dist\*.whl

  osx-wheel:
    name: OSX ${{ matrix.python-version }} Wheel

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['macos-latest']
        python-version: [3.6, 3.7, 3.8]
      fail-fast: true

    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    - name: build
      run: |
        ./ci/build-wheel-osx.sh ${{ matrix.python-version }}

    - name: test
      run: |
        ./ci/test-wheel-osx.sh

    - uses: actions/upload-artifact@v2
      with:
        name: osx-${{matrix.python-version}}-whl
        path: dist/*.whl

  collect-artifacts:
    name: Package and push release

    needs: [windows-wheel, linux-wheel, osx-wheel, conda, ubuntu]

    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
      - name: Source
        shell: bash -l {0}
        run: |
            python3 -m pip install --upgrade pip
            python3 -m pip install setuptools numpy flake8 pytest wheel
            export PATH=$PATH:/home/runner/.local/bin
            python3 setup.py sdist

      - uses: actions/download-artifact@v2
        with:
          path: dist
        name: Download artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: dist

      - name: Unpack
        shell: bash -l {0}
        working-directory: dist
        run: |
          for f in *whl
          do
            cd "$f"
            cp *.whl ..
            cd ..
          done;
          rm -rf *\-whl
          ls -al

      - uses: pypa/gh-action-pypi-publish@master
        name: Publish package
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
          packages_dir: ./dist